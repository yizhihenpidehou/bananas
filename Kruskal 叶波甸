#include <stdio.h>
#include <string.h>
#include <math.h> 
#include <algorithm>
#include <iostream>
#define Max -9999
#define Min 100000
using namespace std;
int fa[5000];//存储每个点的父节点
struct node{
	int s;//起点 
	int e;//终点 
	int w;//权值 
}edge[5000];
void init(int n){  //初始化数组，每个人的父亲为自己 
	for(int i=0;i<=n;++i){
		fa[i]=i;
	}
} 
int find(int x){  //寻找顶端父节点 
	return fa[x]==x?x:find(fa[x]);
}
void baba(int x,int y){ //加入集体 
	int fa1=find(x);
	int fa2=find(y);
	fa[fa2]=fa1;
} 
bool cmp(struct node x,struct node y){  
	return x.w<y.w;
}
int main(void){
	int n,m;//点数和边数 
	scanf("%d %d",&n,&m);
	for(int i=1;i<=m;i++){
		scanf("%d %d %d",&edge[i].s,&edge[i].e,&edge[i].w); 
	}
	init(n);
    sort(edge+1,edge+n+1,cmp);
    int k=0,sum=0;
	for(int i=1;i<=m;++i){  //从小到大遍历 
    	if(k==n-1) break;
    	else{
    		if(find(edge[i].s)!=find(edge[i].e)){  //判断这两点是否在同一个集体，即判断是否形成闭环 
    			baba(edge[i].s,edge[i].e); //将该边加入路径 
    			k++; //边增加 
    			sum+=edge[i].w; //加上权值 
			}
		}
	}
	printf("%d\n",sum);
	return 0;
}
